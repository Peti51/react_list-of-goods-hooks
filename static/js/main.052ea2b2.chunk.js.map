{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","copiedData","useState","isReversed","setIsReversed","NONE","sortType","setSortType","changedArr","useMemo","goods","visibleGoods","sort","goodFirst","goodSecond","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","prevState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA8BE,IAAME,EAAgB,WAC3B,IAAMC,EAAU,UAAOF,GACvB,EAAoCG,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASJ,EAASO,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAYMC,EAAuBC,mBAC3B,kBAxCJ,SACEC,EACAP,EACAG,GAEA,IAAMK,EAAY,YAAOD,GAczB,OAZAC,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAQR,GACN,KAAKR,EAASiB,SACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKhB,EAASmB,OACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OACvC,KAAKpB,EAASO,KACd,QACE,OAAO,MAINF,EAAaQ,EAAaQ,UAAYR,EAqBrCS,CAAkBnB,EAAYE,EAAYG,KAChD,CAACL,EAAYE,EAAYG,IAG3B,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBf,IAAaR,EAASiB,SAAW,GAAK,YACnEQ,QAAS,kBAAMhB,EAAYT,EAASiB,WAHtC,iCAQA,wBACEO,KAAK,SACLD,UAAS,4BAAuBf,IAAaR,EAASmB,OAAS,GAAK,YACpEM,QAAS,kBAAMhB,EAAYT,EAASmB,SAHtC,4BAQA,wBACEK,KAAK,SACLD,UAAS,4BAAuBlB,EAAa,GAAK,YAClDoB,QArCQ,WACdnB,GAAc,SAAAoB,GAAS,OAAKA,MAiCxB,sBAQErB,GAAcG,IAAaR,EAASO,OACpC,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QA1CM,WACdnB,GAAc,GAEdG,EAAYT,EAASO,OAoCf,sBAUJ,6BACE,6BACGG,EAAWiB,KAAI,SAACC,GAAD,OACd,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCzGpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.052ea2b2.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 0,\n  ALPHABET = 1,\n  LENGTH = 2,\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  isReversed: boolean,\n  sortType: SortType,\n):string[] {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goodFirst, goodSecond) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return goodFirst.localeCompare(goodSecond);\n      case SortType.LENGTH:\n        return goodFirst.length - goodSecond.length;\n      case SortType.NONE:\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const copiedData = [...goodsFromServer];\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reverse = () => {\n    setIsReversed(prevState => !prevState);\n  };\n\n  const onReset = () => {\n    setIsReversed(false);\n\n    setSortType(SortType.NONE);\n  };\n\n  const changedArr: string[] = useMemo(\n    () => getReorderedGoods(copiedData, isReversed, sortType),\n    [copiedData, isReversed, sortType],\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType === SortType.LENGTH ? '' : 'is-light'}`}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={onReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {changedArr.map((good) => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}