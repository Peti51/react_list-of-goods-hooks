{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","copiedData","useState","trueOrFalseReverse","reversing","NONE","sortType","sorting","changedArr","useMemo","goods","trueOrFalse","visible","sort","goodFirst","goodSecond","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,IAAMC,EAAU,UAAOF,GACvB,EAAwCG,oBAAS,GAAjD,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAA4BF,mBAASJ,EAASO,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KAMMC,EACJC,mBAAQ,kBArCZ,SACEC,EACAC,EACAL,GAEA,IAAMM,EAAO,YAAOF,GAmBpB,OAjBAE,EAAQC,MAAK,SAACC,EAAWC,GACvB,OAAQT,GACN,KAAKR,EAASkB,SACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKjB,EAASoB,OACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OACvC,KAAKrB,EAASO,KAEd,QACE,OAAO,OAIO,IAAhBM,GACFC,EAAQQ,UAGHR,EAaSS,CAAkBpB,EAAYE,EAAoBG,KAChE,CAACL,EAAYE,EAAoBG,IAEnC,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBhB,IAAaR,EAASkB,SAAW,GAAK,YACnEQ,QAAS,kBAAMjB,EAAQT,EAASkB,WAHlC,iCAQA,wBACEO,KAAK,SACLD,UAAS,4BAAuBhB,IAAaR,EAASoB,OAAS,GAAK,YACpEM,QAAS,kBAAMjB,EAAQT,EAASoB,SAHlC,4BAQA,wBACEK,KAAK,SACLD,UAAS,4BAAuBnB,EAAqB,GAAK,YAC1DqB,QAAS,WA7BfpB,GAAU,SAAAqB,GAAO,OAAKA,MA0BlB,qBAQCtB,GAAsBG,IAAaR,EAASO,KAEzC,wBACEkB,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPpB,GAAU,GACVG,EAAQT,EAASO,OALrB,mBAWA,QAGN,6BACE,6BACGG,EAAWkB,KAAI,SAACC,GACf,OAAO,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC1G3CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aefe8c2d.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 0,\n  ALPHABET = 1,\n  LENGTH = 2,\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  trueOrFalse: boolean,\n  sortType: SortType,\n):string[] {\n  const visible = [...goods];\n\n  visible.sort((goodFirst, goodSecond) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return goodFirst.localeCompare(goodSecond);\n      case SortType.LENGTH:\n        return goodFirst.length - goodSecond.length;\n      case SortType.NONE:\n        return 0;\n      default:\n        return 0;\n    }\n  });\n\n  if (trueOrFalse === true) {\n    visible.reverse();\n  }\n\n  return visible;\n}\n\nexport const App: React.FC = () => {\n  const copiedData = [...goodsFromServer];\n  const [trueOrFalseReverse, reversing] = useState(false);\n  const [sortType, sorting] = useState(SortType.NONE);\n\n  const reverse = () => {\n    reversing(current => !current);\n  };\n\n  const changedArr: string[]\n  = useMemo(() => getReorderedGoods(copiedData, trueOrFalseReverse, sortType),\n    [copiedData, trueOrFalseReverse, sortType]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n          onClick={() => sorting(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType === SortType.LENGTH ? '' : 'is-light'}`}\n          onClick={() => sorting(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${trueOrFalseReverse ? '' : 'is-light'}`}\n          onClick={() => reverse()}\n        >\n          Reverse\n        </button>\n\n        {trueOrFalseReverse || sortType !== SortType.NONE\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                reversing(false);\n                sorting(SortType.NONE);\n              }}\n            >\n              Reset\n            </button>\n          )\n          : null}\n      </div>\n\n      <ul>\n        <ul>\n          {changedArr.map((good) => {\n            return <li data-cy=\"Good\" key={good}>{good}</li>;\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}